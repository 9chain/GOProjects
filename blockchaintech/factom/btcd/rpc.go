package main

import (
    "log"
    "io/ioutil"
    "path/filepath"
    "github.com/btcsuitereleases/btcrpcclient"
    "github.com/btcsuitereleases/btcutil"
    "time"
    "github.com/btcsuitereleases/btcd/wire"
)

func getBlockHeight() {
    // Load the certificate for the TLS connection which is automatically
    // generated by btcd when it starts the RPC server and doesn't already
    // have one.
    btcdHomeDir := btcutil.AppDataDir("btcd", false)
    log.Println("btcd home dir ", btcdHomeDir)
    certs, err := ioutil.ReadFile(filepath.Join(btcdHomeDir, "rpc.cert"))
    if err != nil {
        log.Fatal(err)
    }

    // Create a new RPC client using websockets.  Since this example is
    // not long-lived, the connection will be closed as soon as the program
    // exits.
    connCfg := &btcrpcclient.ConnConfig{
        Host:         "localhost:18334",
        Endpoint:     "ws",
        User:         "jbi",
        Pass:         "jbi123456",
        Certificates: certs,
    }
    client, err := btcrpcclient.New(connCfg, nil)
    if err != nil {
        log.Fatal(err)
    }
    defer client.Shutdown()

    // Query the RPC server for the current block count and display it.
    blockCount, err := client.GetBlockCount()
    if err != nil {
        log.Fatal(err)
    }
    log.Printf("Block count: %d", blockCount)
}

func getGenesisBlock() {
    // Load the certificate for the TLS connection which is automatically
    // generated by btcd when it starts the RPC server and doesn't already
    // have one.
    btcdHomeDir := btcutil.AppDataDir("btcd", false)
    certs, err := ioutil.ReadFile(filepath.Join(btcdHomeDir, "rpc.cert"))
    if err != nil {
        log.Fatal(err)
    }

    // Create a new RPC client using websockets.  Since this example is
    // not long-lived, the connection will be closed as soon as the program
    // exits.
    connCfg := &btcrpcclient.ConnConfig{
        Host:         "localhost:18334",
        Endpoint:     "ws",
        User:         "jbi",
        Pass:         "jbi123456",
        Certificates: certs,
    }
    client, err := btcrpcclient.New(connCfg, nil)
    if err != nil {
        log.Fatal(err)
    }
    defer client.Shutdown()

    // Query the RPC server for the genesis block using the "getblock"
    // command with the verbose flag set to true and the verboseTx flag
    // set to false.
    genesisHashStr := "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f"
    blockHash, err := wire.NewShaHashFromStr(genesisHashStr)
    //blockHash, err := chainhash.NewHashFromStr(genesisHashStr)
    if err != nil {
        log.Fatal(err)
    }
    block, err := client.GetBlockVerbose(blockHash, false)
    if err != nil {
        log.Fatal(err)
    }

    // Display some details about the returned block.
    log.Printf("Hash: %v\n", block.Hash)
    log.Printf("Previous Block: %v\n", block.PreviousHash)
    log.Printf("Next Block: %v\n", block.NextHash)
    log.Printf("Merkle root: %v\n", block.MerkleRoot)
    log.Printf("Timestamp: %v\n", time.Unix(block.Time, 0).UTC())
    log.Printf("Confirmations: %v\n", block.Confirmations)
    log.Printf("Difficulty: %f\n", block.Difficulty)
    log.Printf("Size (in bytes): %v\n", block.Size)
    log.Printf("Num transactions: %v\n", len(block.Tx))
}

func notifyTest() {
    // Setup handlers for blockconnected and blockdisconnected
    // notifications.
    ntfnHandlers := btcrpcclient.NotificationHandlers{
        OnBlockConnected: func(hash *wire.ShaHash, height int32) {
            log.Printf("Block connected: %v (%d)", hash, height)
        },
        OnBlockDisconnected: func(hash *wire.ShaHash, height int32) {
            log.Printf("Block disconnected: %v", hash, height)
        },
    }

    // Load the certificate for the TLS connection which is automatically
    // generated by btcd when it starts the RPC server and doesn't already
    // have one.
    btcdHomeDir := btcutil.AppDataDir("btcd", false)
    certs, err := ioutil.ReadFile(filepath.Join(btcdHomeDir, "rpc.cert"))
    if err != nil {
        log.Fatal(err)
    }

    // Create a new RPC client using websockets.
    connCfg := &btcrpcclient.ConnConfig{
        Host:         "localhost:18334",
        Endpoint:     "ws",
        User:         "jbi",
        Pass:         "jbi123456",
        Certificates: certs,
    }
    client, err := btcrpcclient.New(connCfg, &ntfnHandlers)
    if err != nil {
        log.Fatal(err)
    }

    // Register for blockconnected and blockdisconneted notifications.
    if err := client.NotifyBlocks(); err != nil {
        client.Shutdown()
        log.Fatal(err)
    }

    // For this example, gracefully shutdown the client after 10 seconds.
    // Ordinarily when to shutdown the client is highly application
    // specific.
    log.Println("Client shutdown in 10 seconds...")
    time.AfterFunc(time.Second*10, func() {
        log.Println("Client shutting down...")
        client.Shutdown()
        log.Println("Client shutdown complete.")
    })

    // Wait until the client either shuts down gracefully (or the user
    // terminates the process with Ctrl+C).
    client.WaitForShutdown()
}


func main() {

    getBlockHeight()
    //getGenesisBlock()
    notifyTest()


}
